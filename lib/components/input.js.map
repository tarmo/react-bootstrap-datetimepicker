{"version":3,"sources":["../../src/components/input.js"],"names":[],"mappings":"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","file":"input.js","sourcesContent":["import React, { Component } from \"react\"\nimport { findDOMNode } from \"react-dom\"\nimport classNames from \"classnames\"\nimport moment from \"moment\"\nimport { MODE_TIME } from \"../config.js\"\n\nclass DateTimePickerInput extends Component {\n\n    static propTypes = {\n        bsSize      : React.PropTypes.string,\n        focusOnShow : React.PropTypes.bool,\n        icon        : React.PropTypes.bool,\n        icons       : React.PropTypes.object,\n        inputProps  : React.PropTypes.object,\n        mode        : React.PropTypes.string,\n        onChange    : React.PropTypes.func,\n        onClick     : React.PropTypes.func,\n        show        : React.PropTypes.bool,\n        value       : React.PropTypes.string\n    };\n\n    state = {\n        value: this.props.value\n    };\n\n    componentDidUpdate () {\n        const {\n            focusOnShow,\n            show,\n            value\n        } = this.props\n        const input = findDOMNode(this.refs.input)\n\n        if (show && focusOnShow && input) {\n            input.focus()\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.value !== nextProps.value) {\n            this.setState({ value: nextProps.value })\n        }\n    }\n\n    onChangeInput = (e) => {\n        e.preventDefault()\n\n        this.setState({ value: e.target.value })\n    };\n\n    commitChange () {\n        const {\n            onChange,\n            displayFormat,\n            value: propsValue\n        } = this.props\n\n        const {\n            value\n        } = this.state;\n\n        if (!value) {\n            onChange(null);\n            return;\n        }\n\n        if (propsValue === value) {\n            // No change to commit\n            return;\n        }\n\n        const dateTime = moment(value, displayFormat)\n\n        if (dateTime.isValid()) {\n            onChange(dateTime)\n        } else {\n            const dateTimeIso = moment(this.state.value)\n\n            if (dateTimeIso.isValid()) {\n                onChange(dateTimeIso)\n            }\n        }\n    }\n\n    onBlur = () => {\n        this.commitChange()\n    };\n\n    onKeyPress = (e) => {\n        if (e.charCode === 13) {\n            this.commitChange()\n        }\n    };\n\n    render () {\n        const {\n            bsSize,\n            icons,\n            inputProps,\n            mode,\n            onClick,\n        } = this.props\n\n        const {\n            value\n        } = this.state\n\n        const classes = classNames(\n            \"input-group\",\n            \"date\",\n            {\n                [`input-group-${bsSize}`] : bsSize\n            }\n        )\n\n        const iconClasses = mode === MODE_TIME ? icons.time : icons.date\n\n        return (\n            <div className={ classes }>\n                <input className=\"form-control\"\n                       type=\"text\"\n                       ref=\"input\"\n                       value={ value }\n                       onChange={ this.onChangeInput }\n                       onBlur={ this.onBlur }\n                       onKeyPress={ this.onKeyPress }\n                       { ...inputProps } />\n\n                <span className=\"input-group-addon\"\n                      onClick={ onClick }>\n                    <span className={ iconClasses } />\n                </span>\n            </div>\n        )\n    }\n\n}\n\nexport default DateTimePickerInput\n"]}